# -*- coding: utf-8 -*-
"""Copy of 02_Logistic_Regression_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SCKTMBvrJ0hRcUjcHACCUPvxktIG8QiI

# Logistic Regression Project - Solutions

In this project we will be working with a fake advertising data set, indicating whether or not a particular internet user clicked on an Advertisement on a company website. We will try to create a model that will predict whether or not they will click on an ad based off the features of that user.

This data set contains the following features:

* 'Daily Time Spent on Site': consumer time on site in minutes
* 'Age': cutomer age in years
* 'Area Income': Avg. Income of geographical area of consumer
* 'Daily Internet Usage': Avg. minutes a day consumer is on the internet
* 'Ad Topic Line': Headline of the advertisement
* 'City': City of consumer
* 'Male': Whether or not consumer was male
* 'Country': Country of consumer
* 'Timestamp': Time at which consumer clicked on Ad or closed window
* 'Clicked on Ad': 0 or 1 indicated clicking on Ad

## Import Libraries

**Import a few libraries you think you'll need (Or just import them as you go along!)**
"""

import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

"""## Get the Data
**Read in the advertising.csv file and set it to a data frame called ad_data.**
"""

ad_data = pd.read_csv("/content/advertising.csv")

"""**Check the head of ad_data**"""

ad_data.head()

"""**Use info and describe() on ad_data**"""

ad_data.info()
ad_data.describe()

"""## Exploratory Data Analysis

Let's use seaborn to explore the data!

Try recreating the plots shown below!

**Create a histogram of the Age**
"""

ad_data.describe()

sns.histplot(ad_data['Age'], kde=False, bins=10)

"""**Create a jointplot showing Area Income versus Age.**"""

sns.jointplot(x="Age",y="Area Income",data = ad_data,kind = "scatter",markers=["o"])

"""**Create a jointplot showing the kde distributions of Daily Time spent on site vs. Age.**"""

sns.jointplot(x="Age",y="Daily Time Spent on Site",data = ad_data,kind ="kde",fill = True,color = "red")

"""**Create a jointplot of 'Daily Time Spent on Site' vs. 'Daily Internet Usage'**"""

sns.jointplot(x="Daily Time Spent on Site",y="Daily Internet Usage",data=ad_data,kind = "scatter",markers =['o'],color = "green")

"""**Finally, create a pairplot with the hue defined by the 'Clicked on Ad' column feature.**"""

sns.pairplot(ad_data,hue='Clicked on Ad',diag_kind ='hist',palette="coolwarm",markers=["o"])

"""# Logistic Regression

Now it's time to do a train test split, and train our model!

You'll have the freedom here to choose columns that you want to train on!

**Split the data into training set and testing set using train_test_split**
"""

from sklearn.model_selection import train_test_split
ad_data.dropna(axis =0)

X = ad_data.drop(columns = ["Clicked on Ad"])
X = X.select_dtypes(include=['float64', 'int64'])

y = ad_data['Clicked on Ad']

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=3)

"""**Train and fit a logistic regression model on the training set.**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=3)

from sklearn.linear_model import LogisticRegression

lm = LogisticRegression()
lm.fit(X_train, y_train)

"""## Predictions and Evaluations
**Now predict values for the testing data.**
"""

predicted_values = lm.predict(X_test)

"""**Create a classification report for the model.**"""

from sklearn.metrics import classification_report

report = classification_report(y_test,predicted_values)
print(report)

"""## Great Job!"""